/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aplikasigudang;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Axioo
 */
public class FDataKategori extends javax.swing.JFrame {

    /**
     * Creates new form FDataKategori
     */
    public FDataKategori() {
        initComponents();
        load_data();
        IDOtomatis();
    }
    
    public void load_data(){
        Connection kon=koneksi.koneksiDb();
        Object header[]={"ID KATEGORI","NAMA KATEGORI"};
        DefaultTableModel data=new DefaultTableModel(null,header);
        TabelKategori.setModel(data);
        String sql_data="SELECT * FROM tbl_kategori";
        
        try
        {
            Statement st=kon.createStatement();
            ResultSet rs=st.executeQuery(sql_data);
            while(rs.next())
            {
                String d1=rs.getString(1);
                String d2=rs.getString(2);
                
                String d[]={d1,d2};
                data.addRow(d);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    public void IDOtomatis(){
        
        try
        {
            Connection kon=koneksi.koneksiDb();
            Statement st=kon.createStatement();
            String sql_id="SELECT * FROM tbl_kategori ORDER BY id_kategori";
            ResultSet rs=st.executeQuery(sql_id);
            if(rs.next())
            {
                String id_kategori=rs.getString("id_kategori").substring(1);
                String AN=""+(Integer.parseInt(id_kategori)+1);
                String Nol="";
                if(AN.length()==1)
                {
                    Nol="0000";
                }
                else if(AN.length()==2)
                {
                    Nol="000";
                }
                else if(AN.length()==3)
                {
                    Nol="00";
                }
                IDKAT.setText("A"+Nol+AN);
            }
            else
            {
                IDKAT.setText("A00001");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }
            

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        IDKAT = new javax.swing.JTextField();
        NAMAKAT = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelKategori = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("DATA KATEGORI");

        jLabel2.setText("ID Kategori");

        jLabel3.setText("Nama Kategori");

        jButton1.setText("SIMPAN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("EDIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("HAPUS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("KELUAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        TabelKategori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TabelKategori);

        jLabel4.setText("Cari Berdasarkan Nama");

        jButton5.setText("CARI");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("REFRESH");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("CETAK LAPORAN");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5))
                            .addComponent(IDKAT)
                            .addComponent(NAMAKAT)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton5)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(IDKAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(NAMAKAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 23, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Dapatkan nilai dari kolom input
        String id_kategori = IDKAT.getText();
        String nama_kategori = NAMAKAT.getText();
        
        // Masukkan data ke dalam basis data MySQL
        try {
            Connection kon = koneksi.koneksiDb();
            Statement st = kon.createStatement();

            String sql_insert = "INSERT INTO tbl_kategori (id_kategori, nama_kategori) VALUES ('" + id_kategori + "', '" + nama_kategori + "')";
            st.executeUpdate(sql_insert);
            
        // Tampilkan pesan sukses
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan");

        // Bersihkan kolom input
            IDKAT.setText("");
            NAMAKAT.setText("");

        // Perbarui tabel untuk menampilkan data yang telah diperbarui
            load_data();
            IDOtomatis();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed
        
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new Gudang_Apk().show();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Mendapatkan baris yang dipilih dari tabel
            int selectedRow = TabelKategori.getSelectedRow();

        // Memastikan baris terpilih sebelum melanjutkan
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus");
                return;
            }
        
        // Mendapatkan nilai ID Kategori dari baris terpilih
            String id_kategori = TabelKategori.getValueAt(selectedRow, 0).toString();

        // Konfirmasi penghapusan dari pengguna
            int confirm = JOptionPane.showConfirmDialog(this, "Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus Data", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
        
        // Hapus data dari database MySQL
            try {
                Connection kon = koneksi.koneksiDb();
                Statement st = kon.createStatement();
                String sql_delete = "DELETE FROM tbl_kategori WHERE id_kategori = '" + id_kategori + "'";
                st.executeUpdate(sql_delete);

                // Tampilkan pesan sukses
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus");

                // Perbarui tabel untuk menampilkan data yang telah diperbarui
                load_data();
                IDOtomatis();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Mendapatkan baris yang dipilih dari tabel
            int selectedRow = TabelKategori.getSelectedRow();

        // Memastikan baris terpilih sebelum melanjutkan
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diedit");
                return;
        }
            
        // Mendapatkan nilai ID Kategori dan Nama Kategori dari baris terpilih
            String id_kategori = TabelKategori.getValueAt(selectedRow, 0).toString();
            String nama_kategori = TabelKategori.getValueAt(selectedRow, 1).toString();

        // Menampilkan dialog untuk memasukkan nilai yang baru
            String newNama = JOptionPane.showInputDialog(this, "Masukkan Nama Kategori Baru:", nama_kategori);

        // Memastikan bahwa pengguna memasukkan nilai yang valid dan tidak membatalkan input
            if (newNama != null && !newNama.isEmpty()) {
                // Update data ke dalam database MySQL
                try {
                    Connection kon = koneksi.koneksiDb();
                    Statement st = kon.createStatement();
                    String sql_update = "UPDATE tbl_kategori SET nama_kategori = '" + newNama + "' WHERE id_kategori = '" + id_kategori + "'";
                    st.executeUpdate(sql_update);

                    // Tampilkan pesan sukses
                    JOptionPane.showMessageDialog(this, "Data berhasil diupdate");

                    // Perbarui tabel untuk menampilkan data yang telah diperbarui
                    load_data();
                    IDOtomatis();
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
                }
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Mendapatkan kata kunci pencarian dari TextField
        String keyword = jTextField1.getText().trim();

        // Memastikan bahwa kata kunci tidak kosong sebelum melanjutkan
        if (!keyword.isEmpty()) {
            // Melakukan pencarian berdasarkan nama kategori di database MySQL
            try {
                Connection kon = koneksi.koneksiDb();
                Statement st = kon.createStatement();
                String sql_search = "SELECT * FROM tbl_kategori WHERE nama_kategori LIKE '%" + keyword + "%'";
                ResultSet rs = st.executeQuery(sql_search);

                // Mengisi tabel dengan hasil pencarian
                DefaultTableModel data = new DefaultTableModel();
                data.addColumn("ID KATEGORI");
                data.addColumn("NAMA KATEGORI");

                while (rs.next()) {
                    String d1 = rs.getString(1);
                    String d2 = rs.getString(2);
                    String[] d = {d1, d2};
                    data.addRow(d);
                }

                // Menampilkan hasil pencarian di tabel
                TabelKategori.setModel(data);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
            } else {
                // Jika kata kunci kosong, tampilkan pesan peringatan
                JOptionPane.showMessageDialog(this, "Masukkan kata kunci pencarian");
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Memanggil metode untuk merefresh data
        refreshData();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            // Memuat JasperReport dari file .jasper yang telah dikompilasi
            InputStream reportStream = getClass().getResourceAsStream("/report/reportKategori.jasper");
            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(reportStream);

            // Menyiapkan parameter untuk laporan (jika diperlukan)
            Map<String, Object> parameters = new HashMap<>();

            // Mendapatkan koneksi ke database Anda (sesuaikan sesuai dengan pengaturan database Anda)
            Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/dbase_gudang", "root", "");

            // Menghasilkan objek JasperPrint
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);

            // Menutup koneksi database
            conn.close();

            // Menampilkan laporan menggunakan JasperViewer
            JasperViewer.viewReport(jasperPrint, false);
        } catch (JRException | SQLException ex) {
            // Menghandle exception dengan tepat (misalnya, menampilkan pesan error)
            JOptionPane.showMessageDialog(this, "Error generating report: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    // Metode untuk merefresh data
    private void refreshData() {
        // Mengosongkan kolom-kolom textfield
        IDKAT.setText("");
        NAMAKAT.setText("");
        jTextField1.setText("");
        
        // Memanggil metode load_data() untuk memuat kembali data dari database
        load_data();

        // Memanggil metode IDOtomatis() untuk memperbarui ID otomatis
        IDOtomatis();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FDataKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FDataKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FDataKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FDataKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FDataKategori().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDKAT;
    private javax.swing.JTextField NAMAKAT;
    private javax.swing.JTable TabelKategori;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
